
module Verification.Core.Set.Setoid.As.Category where

open import Verification.Conventions
-- open import Verification.Core.Data.Prop.Definition
-- open import Verification.Core.Data.Product.Definition
open import Verification.Core.Set.Setoid.Definition
open import Verification.Core.Set.Setoid.Discrete
open import Verification.Core.Category.Std.Category.Definition

-- NOTE:
-- This concept does not make much sense.
-- A setoid has as much information as a category,
-- but does not follow the laws of categories.
-- Thus it is not possible to embed it in the structure
-- of a category, without building a quotient for
-- the equality of arrows.

{-
module _ {A : ùí∞ ùëñ} {{_ : isSetoid {ùëó} A}} where

  isCategory:bySetoid : isCategory {_ , _} A
  isCategory.Hom isCategory:bySetoid          = Œª a b -> a ‚àº b
  isCategory.isSetoid:Hom isCategory:bySetoid = isSetoid:byDiscrete
  isCategory.id isCategory:bySetoid           = refl
  isCategory._‚óÜ_ isCategory:bySetoid          = _‚àô_
  isCategory.unit-l-‚óÜ isCategory:bySetoid     = {!!}
  isCategory.unit-r-‚óÜ isCategory:bySetoid     = {!!}
  isCategory.unit-2-‚óÜ isCategory:bySetoid     = {!!}
  isCategory.assoc-l-‚óÜ isCategory:bySetoid    = {!!}
  isCategory.assoc-r-‚óÜ isCategory:bySetoid    = {!!}
  isCategory._‚óà_ isCategory:bySetoid          = Œª x x‚ÇÅ ‚Üí {!!}



open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Category.Std.Functor.Definition

module _ {A : ùí∞ ùëñ} {{_ : isSetoid {ùëó} A}} {‚Ñ¨ : Category ùëò} where
  private
    instance
      _ : isSetoid ‚ü® ‚Ñ¨ ‚ü©
      _ = isSetoid:byCategory

  instance
    isFunctor:bySetoid : {f : A -> ‚ü® ‚Ñ¨ ‚ü©} {{_ : isSetoidHom ‚Ä≤ A ‚Ä≤ ‚Ä≤ ‚ü® ‚Ñ¨ ‚ü© ‚Ä≤ f}} -> isFunctor (A since isCategory:bySetoid) ‚Ñ¨ f
    isFunctor.map (isFunctor:bySetoid {f}) = Œª p ‚Üí ‚ü® cong-‚àº p ‚ü©
    isFunctor.isSetoidHom:map (isFunctor:bySetoid {f}) = record { cong-‚àº = Œª {a} {b} p ‚Üí transport (Œª i -> ‚ü® cong-‚àº a ‚ü© ‚àº ‚ü® cong-‚àº (p i) ‚ü©) refl }
    isFunctor.functoriality-id (isFunctor:bySetoid {f}) = {!!}
    isFunctor.functoriality-‚óÜ (isFunctor:bySetoid {f}) = {!!}

-}

