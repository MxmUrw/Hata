
module Verification.Core.Category.Std.Limit.Representation.Colimit.Definition where

open import Verification.Conventions
open import Verification.Core.Set.Setoid.Definition
open import Verification.Core.Set.Setoid.Instance.Category
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Opposite
open import Verification.Core.Category.Std.Category.Instance.Category
open import Verification.Core.Category.Std.Category.Instance.2Category
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Variant.Binary
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Functor.Constant
open import Verification.Core.Category.Std.Functor.Instance.Category
open import Verification.Core.Category.Std.Natural.Definition
open import Verification.Core.Category.Std.Natural.Instance.Setoid
open import Verification.Core.Category.Std.Functor.Representable2



module _ (­ЮњЦ : Category ­ЮЉў) {­Юњъ : Category ­ЮЉЎ} where

  Coconst : ­ЮљЁ­Юљ«­ЮљД­Юљю ­Юњъ (­ЮљЁ­Юљ«­ЮљД­Юљю ­ЮњЦ ­Юњъ рхњрхќ)
  Coconst = (╬╗ x -> const x since isFunctor:const) since {!!}

  Const' : ­ЮљЁ­Юљ«­ЮљД­Юљю (­Юњъ рхњрхќ) (­ЮљЁ­Юљ«­ЮљД­Юљю ­ЮњЦ ­Юњъ рхњрхќ)
  Const' = {!!}

  Const'' : ­ЮљЁ­Юљ«­ЮљД­Юљю (­Юњъ) (­ЮљЁ­Юљ«­ЮљД­Юљю ­ЮњЦ ­Юњъ)
  Const'' = Const since isFunctor:Const

  module _ (F : ­ЮљЁ­Юљ«­ЮљД­Юљю ­ЮњЦ ­Юњъ) where
    F2 : ­ЮљЁ­Юљ«­ЮљД­Юљю (­ЮљЁ­Юљ«­ЮљД­Юљю ­ЮњЦ ­Юњъ рхњрхќ) (­Юљњ­ЮљГ­ЮљЮ _)
    F2 = Рёј­ЮЉю­ЮЉџ F

module _ {­ЮњЦ : Category ­ЮЉќ} {­Юњъ : Category ­ЮЉЌ} where

  isLimit : (F : ­ЮљЁ­Юљ«­ЮљД­Юљю ­ЮњЦ ­Юњъ) -> РЪе ­Юњъ РЪЕ -> ­Юњ░ _
  isLimit F x = isRepresented (Const' ­ЮњЦ РЌє-­Юљѓ­Юљџ­ЮљГ Рёј­ЮЉю­ЮЉџ F) x

  isColimit : (F : ­ЮљЁ­Юљ«­ЮљД­Юљю ­ЮњЦ ­Юњъ) -> РЪе ­Юњъ РЪЕ -> ­Юњ░ _
  isColimit F x = isCorepresented (Const'' ­ЮњЦ РЌє-­Юљѓ­Юљџ­ЮљГ Рёј­ЮЉю­ЮЉџрхњрхќ F) x

  -- hasColimit : (F : ­ЮљЁ­Юљ«­ЮљД­Юљю ­ЮњЦ ­Юњъ) -> ­Юњ░ _
  -- hasColimit F = РѕЉ ╬╗ (x : РЪе ­Юњъ РЪЕ) -> isCorepresented (Coconst РЌє-­Юљѓ­Юљџ­ЮљГ Рёј­ЮЉю­ЮЉџ F) x

--
-- we show that these colimits are the same as the ones
-- defined by cones
--

  open import Verification.Core.Category.Std.Limit.Cone.Colimit.Definition
    renaming (isColimit to isConeColimit)

  open import Verification.Core.Category.Std.Limit.Cone.Limit.Definition
    renaming (isLimit to isConeLimit)

  module _ (F : ­ЮљЁ­Юљ«­ЮљД­Юљю ­ЮњЦ ­Юњъ) (x : РЪе ­Юњъ РЪЕ) where
    prop-1 : isLimit F x -> isConeLimit F x
    prop-1 P =
      let ¤Ћ : (Const' ­ЮњЦ РЌє-­Юљѓ­Юљџ­ЮљГ Рёј­ЮЉю­ЮЉџ F) РЅЁ-Co­ЮљЈ­Юљњ­ЮљА Рёј­ЮЉю­ЮЉџ x
          ¤Ћ = rep P

          ╬▒рхў : Рѕђ(j : РЪе ­ЮњЦ РЪЕ) -> x РЪХ РЪе F РЪЕ j
          ╬▒рхў j = let f = РЪе inverse-РЌє-Co­ЮљЈ­Юљњ­ЮљА (of ¤Ћ) РЪЕ (x)
                 in {!!} -- РЪе РЪе f РЪЕ id РЪЕ j
                 -- РЪе f РЪЕ ({!!} since {!!})
                  -- РЪе РЪе ¤Ћ РЪЕ (РЪе F РЪЕ j) РЪЕ ?

      in record
        { limitCocone = {!!}
        ; limitUniversal = {!!}
        }
{-
-}



