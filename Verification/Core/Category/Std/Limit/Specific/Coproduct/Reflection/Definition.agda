
module Verification.Core.Category.Std.Limit.Specific.Coproduct.Reflection.Definition where

open import Verification.Conventions hiding (_‚äî_)

open import Verification.Core.Set.Setoid
open import Verification.Core.Set.Discrete
open import Verification.Core.Data.Product.Definition
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Morphism.Iso

open import Verification.Core.Category.Std.Category.Subcategory.Full
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition

open import Verification.Core.Category.Std.Functor.Faithful
open import Verification.Core.Category.Std.Functor.Full
open import Verification.Core.Category.Std.Functor.EssentiallySurjective
open import Verification.Core.Set.Setoid.Morphism


module _ {ùíû : Category ùëñ} {ùíü : Category ùëó} {F : Functor ùíû ùíü} {{_ : isFull F}} {{_ : isFaithful F}} where

  module _ {a b x : ‚ü® ùíû ‚ü©} (P : isCoproduct (‚ü® F ‚ü© a) (‚ü® F ‚ü© b) (‚ü® F ‚ü© x)) where
    private
      instance _ = P
      Œπ‚ÇÄ' : a ‚ü∂ x
      Œπ‚ÇÄ' = surj Œπ‚ÇÄ

      Œπ‚ÇÅ' : b ‚ü∂ x
      Œπ‚ÇÅ' = surj Œπ‚ÇÅ

      ‚¶ó_‚¶ò' : ‚àÄ{y} -> (a ‚ü∂ y) √ó (b ‚ü∂ y) -> x ‚ü∂ y
      ‚¶ó_‚¶ò' (f , g) = surj (‚¶ó map f , map g ‚¶ò)

    isCoproduct:byFullyFaithfull : isCoproduct a b x
    isCoproduct.Œπ‚ÇÄ isCoproduct:byFullyFaithfull = Œπ‚ÇÄ'
    isCoproduct.Œπ‚ÇÅ isCoproduct:byFullyFaithfull = Œπ‚ÇÅ'
    isCoproduct.‚¶ó isCoproduct:byFullyFaithfull ‚¶ò = ‚¶ó_‚¶ò'
    isCoproduct.isSetoidHom:‚¶ó‚¶ò isCoproduct:byFullyFaithfull = {!!}
    isCoproduct.reduce-Œπ‚ÇÄ isCoproduct:byFullyFaithfull = {!!}
    isCoproduct.reduce-Œπ‚ÇÅ isCoproduct:byFullyFaithfull = {!!}
    isCoproduct.expand-Œπ‚ÇÄ,Œπ‚ÇÅ isCoproduct:byFullyFaithfull = {!!}

  module _ {{_ : isEssentiallySurjective F}} {{_ : hasCoproducts ùíü}} where
    private
      _‚äî'_ : ‚ü® ùíû ‚ü© -> ‚ü® ùíû ‚ü© -> ‚ü® ùíû ‚ü©
      _‚äî'_ a b = eso (‚ü® F ‚ü© a ‚äî ‚ü® F ‚ü© b)

      module _ {a b : ‚ü® ùíû ‚ü©} where
        lem-10 : isCoproduct a b (a ‚äî' b)
        lem-10 = isCoproduct:byFullyFaithfull (transp-‚âÖ-Coproduct p)
          where
            p : (‚ü® F ‚ü© a ‚äî ‚ü® F ‚ü© b) ‚âÖ ‚ü® F ‚ü© (eso (‚ü® F ‚ü© a ‚äî ‚ü® F ‚ü© b))
            p = sym-‚âÖ inv-eso

      lem-20 : hasCoproducts ùíû
      hasCoproducts._‚äî_ lem-20 = _‚äî'_
      hasCoproducts.isCoproduct:‚äî lem-20 = lem-10

    hasCoproducts:byFFEso : hasCoproducts ùíû
    hasCoproducts:byFFEso = lem-20


  module _ {{_ : isEssentiallySurjective F}} {{_ : hasInitial ùíü}} where
    private
      ‚ä•' : ‚ü® ùíû ‚ü©
      ‚ä•' = eso ‚ä•

      instance
        isInitial:byFFEso : isInitial ‚ä•'
        isInitial:byFFEso = record { elim-‚ä• = {!surj (elim-‚ä•)!} ; expand-‚ä• = {!!} }

    hasInitial:byFFEso : hasInitial ùíû
    hasInitial.‚ä• hasInitial:byFFEso = ‚ä•'
    hasInitial.isInitial:‚ä• hasInitial:byFFEso = it

  module _ {{_ : isEssentiallySurjective F}} {{_ : hasFiniteCoproducts ùíü}} where
    hasFiniteCoproducts:byFFEso : hasFiniteCoproducts ùíû
    hasFiniteCoproducts.hasInitial:this hasFiniteCoproducts:byFFEso = hasInitial:byFFEso
    hasFiniteCoproducts.hasCoproducts:this hasFiniteCoproducts:byFFEso = hasCoproducts:byFFEso



    -- isCoproduct:byFullSubcategory : {{_ : isCoproduct (f ‚ü® a ‚ü©) (f ‚ü® b ‚ü©) (f ‚ü® x ‚ü©)}} -> isCoproduct a b x
    -- isCoproduct.Œπ‚ÇÄ isCoproduct:byFullSubcategory = incl Œπ‚ÇÄ
    -- isCoproduct.Œπ‚ÇÅ isCoproduct:byFullSubcategory = incl Œπ‚ÇÅ
    -- isCoproduct.‚¶ó isCoproduct:byFullSubcategory ‚¶ò = Œª (f , g) -> incl ‚¶ó ‚ü® f ‚ü© , ‚ü® g ‚ü© ‚¶ò
    -- isCoproduct.isSetoidHom:‚¶ó‚¶ò isCoproduct:byFullSubcategory = {!!}
    -- isCoproduct.reduce-Œπ‚ÇÄ isCoproduct:byFullSubcategory = reduce-Œπ‚ÇÄ
    -- isCoproduct.reduce-Œπ‚ÇÅ isCoproduct:byFullSubcategory = reduce-Œπ‚ÇÅ
    -- isCoproduct.expand-Œπ‚ÇÄ,Œπ‚ÇÅ isCoproduct:byFullSubcategory = expand-Œπ‚ÇÄ,Œπ‚ÇÅ
