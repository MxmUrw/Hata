
module Verification.Core.Data.FiniteIndexed.Instance.FiniteCoproductGenerated where

open import Verification.Conventions hiding (_‚äî_)
open import Verification.Core.Set.Setoid
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Discrete
open import Verification.Core.Category.Std.Category.Instance.Category
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Functor.Instance.Category
open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Category.Std.Category.Structured.FiniteCoproduct.Definition

open import Verification.Core.Data.Universe.Instance.Category
open import Verification.Core.Data.List.Variant.Binary.Natural
open import Verification.Core.Data.List.Variant.Binary.Instance.Functor
open import Verification.Core.Data.List.Variant.Binary.Definition
open import Verification.Core.Data.List.Variant.Binary.Instance.Monoid
open import Verification.Core.Data.List.Variant.Binary.Element.Definition
open import Verification.Core.Data.List.Variant.Binary.ElementSum.Definition
open import Verification.Core.Data.List.Variant.Binary.ElementSum.Instance.Category
-- open import Verification.Core.Data.Indexed.Duplicate
open import Verification.Core.Data.Indexed.Definition
open import Verification.Core.Data.Indexed.Instance.Monoid
open import Verification.Core.Data.FiniteIndexed.Definition
open import Verification.Core.Category.Std.Category.Subcategory.Full
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Instance.Functor
open import Verification.Core.Category.Std.Category.Construction.Coproduct

open import Verification.Core.Category.Std.Category.Structured.FiniteCoproductGenerated



module ¬ß-eval-‚ãÜ·∂† where
  module _ {as bs : ‰∫∫‚Ñï} {ùíû : Category ùëó} {{_ : hasFiniteCoproducts ùíû}} {F : Functor ([ as ]·∂† +-ùêÇùêöùê≠ [ bs ]·∂†) ùíû} where
    prop-1 : ‚®Ü·∂† (eval-‚ãÜ·∂† ‚óÜ-ùêÇùêöùê≠ F) ‚âÖ ‚®Ü·∂† (Œπ‚ÇÄ-ùêÇùêöùê≠ ‚óÜ-ùêÇùêöùê≠ F) ‚äî ‚®Ü·∂† (Œπ‚ÇÅ-ùêÇùêöùê≠ ‚óÜ-ùêÇùêöùê≠ F)
    prop-1 = ‚àº-‚®Ü·∂†:byPointwise {G = Œπ‚ÇÄ-ùêÇùêöùê≠ ‚óÜ-ùêÇùêöùê≠ F} (Œª i ‚Üí refl-‚âÖ) ‚âÄ‚äî‚âÄ ‚àº-‚®Ü·∂†:byPointwise {G = Œπ‚ÇÅ-ùêÇùêöùê≠ ‚óÜ-ùêÇùêöùê≠ F} (Œª i ‚Üí refl-‚âÖ)


module _ {I : ùí∞ ùëñ} where
  private
    fcg'Size : ‚ãÜList I -> ‰∫∫‚Ñï
    fcg'Size x = map-‚ãÜList (const tt) x

    fcg' : (a : ‚ãÜList I) -> ùêÖùêÆùêßùêú [ fcg'Size a ]·∂† (ùêÖùê¢ùêßùêàùê± I)
    fcg' (incl x) = (Œª _ ‚Üí incl (incl x)) since isFunctor:byDiscrete
    fcg' (a ‚ãÜ-‚ßú b) = eval-‚ãÜ·∂† ‚óÜ-ùêÇùêöùê≠ ‚¶ó fcg' a , fcg' b ‚¶ò-ùêÇùêöùê≠
    fcg' ‚óå-‚ßú = (Œª ()) since isFunctor:byDiscrete


    fcg'Iso : (a : ‚ãÜList I) -> incl a ‚âÖ ‚®Ü·∂† (fcg' a)
    fcg'Iso (incl x) = refl-‚âÖ
    fcg'Iso (a ‚ãÜ-‚ßú b) =
         incl (a ‚ãÜ-‚ßú b)

         ‚ü®  fcg'Iso a ‚âÄ‚äî‚âÄ fcg'Iso b ‚ü©-‚âÖ

         ‚®Ü·∂† (fcg' a) ‚äî ‚®Ü·∂† (fcg' b)

         ‚ü® ‚®Ü·∂†‚âÄ (sym-‚âÖ reduce-Œπ‚ÇÄ-ùêÇùêöùê≠) ‚âÄ‚äî‚âÄ ‚®Ü·∂†‚âÄ (sym-‚âÖ reduce-Œπ‚ÇÅ-ùêÇùêöùê≠) ‚ü©-‚âÖ

         ‚®Ü·∂† (Œπ‚ÇÄ-ùêÇùêöùê≠ ‚óÜ-ùêÇùêöùê≠ ‚¶ó fcg' a , fcg' b ‚¶ò-ùêÇùêöùê≠) ‚äî ‚®Ü·∂† (Œπ‚ÇÅ-ùêÇùêöùê≠ ‚óÜ-ùêÇùêöùê≠ ‚¶ó fcg' a , fcg' b ‚¶ò-ùêÇùêöùê≠)

         ‚ü® sym-‚âÖ (¬ß-eval-‚ãÜ·∂†.prop-1) ‚ü©-‚âÖ

         ‚®Ü·∂† (eval-‚ãÜ·∂† ‚óÜ-ùêÇùêöùê≠ ‚¶ó fcg' a , fcg' b ‚¶ò-ùêÇùêöùê≠)

         ‚ü® refl-‚âÖ ‚ü©-‚âÖ

         ‚®Ü·∂† (fcg' (a ‚ãÜ-‚ßú b))

         ‚àé-‚âÖ

    fcg'Iso ‚óå-‚ßú = refl-‚âÖ -- refl-‚âÖ


  instance
    isFiniteCoproductGenerated:ùêÖùê¢ùêßùêàùê± : isFiniteCoproductGenerated (ùêÖùê¢ùêßùêàùê± I)
    isFiniteCoproductGenerated:ùêÖùê¢ùêßùêàùê± = record
      { fcgSize = Œª x -> fcg'Size ‚ü® x ‚ü©
      ; fcg = Œª x -> fcg' ‚ü® x ‚ü©
      ; fcgIso = Œª x -> fcg'Iso ‚ü® x ‚ü©
      }



