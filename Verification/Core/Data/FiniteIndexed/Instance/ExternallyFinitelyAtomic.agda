
{-# OPTIONS --experimental-lossy-unification #-}

-- NOTE
-- This file only typechecks with --experimental-lossy-unification,
-- because at some places unification of morphisms in ­ЮљЁ­Юљ«­ЮљЦ­ЮљЦ would
-- need annotations otherwise.
-- With --experimental-lossy-unification, we do not need those.
--

module Verification.Core.Data.FiniteIndexed.Instance.ExternallyFinitelyAtomic where

open import Verification.Conventions hiding (_Ріћ_)
open import Verification.Core.Set.Setoid
open import Verification.Core.Set.Setoid.Definition
open import Verification.Core.Set.Setoid.Instance.Category
open import Verification.Core.Set.Contradiction
open import Verification.Core.Set.Function.Injective
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Discrete
open import Verification.Core.Category.Std.Category.Instance.Category
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Functor.Instance.Category
open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Category.Std.Category.Structured.FiniteCoproduct.Definition

open import Verification.Core.Data.Universe.Instance.Category
open import Verification.Core.Data.List.Variant.Binary.Natural
open import Verification.Core.Data.List.Variant.Binary.Instance.Functor
open import Verification.Core.Data.List.Variant.Binary.Definition
open import Verification.Core.Data.List.Variant.Binary.Instance.Monoid
open import Verification.Core.Data.List.Variant.Binary.Element.Definition
open import Verification.Core.Data.List.Variant.Binary.ElementSum.Definition
open import Verification.Core.Data.List.Variant.Binary.ElementSum.Instance.Category
open import Verification.Core.Data.List.Variant.Binary.Element.Properties
-- open import Verification.Core.Data.Indexed.Duplicate
open import Verification.Core.Data.Product.Definition
open import Verification.Core.Data.Indexed.Definition
open import Verification.Core.Data.Indexed.Instance.Monoid
open import Verification.Core.Data.FiniteIndexed.Definition
open import Verification.Core.Category.Std.Category.Subcategory.Full
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Instance.Functor
open import Verification.Core.Category.Std.Category.Construction.Coproduct
open import Verification.Core.Category.Std.Limit.Cone.Colimit.Definition
open import Verification.Core.Category.Std.Natural.Definition
open import Verification.Core.Category.Std.Functor.Representable2
open import Verification.Core.Category.Std.Functor.Constant
open import Verification.Core.Data.List.Variant.Binary.Element.As.Indexed

-- open import Verification.Core.Category.Std.Category.Structured.FiniteCoproductGenerated
open import Verification.Core.Category.Std.Category.Structured.Atomic.Variant.ExternallyFinitelyAtomic.Definition
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
-- open import Verification.Core.Category.Std.Limit.Cone.Colimit.Definition


module _ {I : ­Юњ░ ­ЮЉќ} where
  ­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ : I -> ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ I
  ­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ i = incl (incl i)

  private
    lem-0 : Рѕђ{a : I} {u : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ I} -> РЪе РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u РЪЕ -> ix (╬╣ u) a
    lem-0 f = РЪе f РЪЕ _ incl

    cong-lem-0 : Рѕђ{a : I} {u : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ I} -> {f g : РЪе РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u РЪЕ} -> f Рѕ╝ g -> lem-0 f РЅА lem-0 g
    cong-lem-0 (incl p) = ╬╗ i Рєњ p _ i incl

    lem-1 : Рѕђ{a : I} {u : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ I} -> ix (╬╣ u) a -> РЪе РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u РЪЕ
    lem-1 ap = incl (╬╗ {i incl Рєњ ap})

    cong-lem-1 : Рѕђ{a : I} {u : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ I} -> {x y : ix (╬╣ u) a} -> x РЅА y -> lem-1 x Рѕ╝ lem-1 y
    cong-lem-1 ap = incl (╬╗ {a i incl Рєњ ap i})

    inverse-РЌє-l-lem-0 : Рѕђ{a : I} {u : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ I} -> {f : РЪе РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u РЪЕ} -> lem-1 (lem-0 f) Рѕ╝ f
    inverse-РЌє-l-lem-0 {a} {u} {f} = incl (╬╗ {a i incl Рєњ РЪе f РЪЕ _ incl})

  module _ {­ЮЉЌ : ­ЮћЈ ^ 3} {a : I} where
    isAtom:­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ : isAtom ­ЮЉЌ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a)
    isAtom:­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ = record { preserve-isCoproduct = P }
      where

        Q : Рѕђ{u v : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ I} -> isCoproduct (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u) (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ v) (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v))
        Q {u} {v} = Res
          where

            ╬╣Рѓђ' : (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u) РЪХ (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v))
            ╬╣Рѓђ' = (╬╗ a -> lem-1 (РЪе ╬╣Рѓђ РЪЕ _ (lem-0 a)))
                  since
                  record { cong-Рѕ╝ = ╬╗ {p Рєњ cong-lem-1 (cong (РЪе ╬╣Рѓђ РЪЕ _) (cong-lem-0 p))} }

            ╬╣РѓЂ' : (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ v) РЪХ (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v))
            ╬╣РѓЂ' = (╬╗ a -> lem-1 (РЪе ╬╣РѓЂ РЪЕ _ (lem-0 a)))
                  since
                  record { cong-Рѕ╝ = ╬╗ {p Рєњ cong-lem-1 (cong (РЪе ╬╣РѓЂ РЪЕ _) (cong-lem-0 p))} }

            module Elim {z : ­Юљњ­ЮљГ­ЮљЮ _} (f : РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u РЪХ z) (g : РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ v РЪХ z) where
              ╬Йрхў : РЪе (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v)) РЪЕ -> РЪе z РЪЕ
              ╬Йрхў h with lem-0 h
              ... | left-РѕЇ  h  = РЪе f РЪЕ (lem-1 h)
              ... | right-РѕЇ h  = РЪе g РЪЕ (lem-1 h)

              cong-╬Й : {a b : РЪе (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v)) РЪЕ} -> (p : a Рѕ╝ b) -> ╬Йрхў a Рѕ╝ ╬Йрхў b
              cong-╬Й {a} {b} p with lem-0 a | lem-0 b | cong-lem-0 p
              ... | right-РѕЇ a | right-РѕЇ b | p = cong-Рѕ╝ {{of g}} (cong-lem-1 (cancel-injective-­Юњ░ p))
              ... | right-РѕЇ a | left-РѕЇ b  | p = impossible p
              ... | left-РѕЇ a  | right-РѕЇ b | p = impossible p
              ... | left-РѕЇ a  | left-РѕЇ b  | p = cong-Рѕ╝ {{of f}} (cong-lem-1 (cancel-injective-­Юњ░ p))


              ╬Й : (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v)) РЪХ z
              ╬Й = ╬Йрхў since record { cong-Рѕ╝ = cong-╬Й }

              reduce-╬╣Рѓђ' : ╬╣Рѓђ' РЌє ╬Й Рѕ╝ f
              reduce-╬╣Рѓђ' = pointwise ╬╗ h -> p
                where
                  p : Рѕђ{h : Hom-­ЮљЁ­Юљ«­ЮљЦ­ЮљЦ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) u} -> ╬Йрхў (РЪе ╬╣Рѓђ' РЪЕ h) Рѕ╝ РЪе f РЪЕ h
                  p {h} = cong-Рѕ╝ {{of f}} inverse-РЌє-l-lem-0

              reduce-╬╣РѓЂ' : ╬╣РѓЂ' РЌє ╬Й Рѕ╝ g
              reduce-╬╣РѓЂ' = pointwise (╬╗ h -> cong-Рѕ╝ {{of g}} inverse-РЌє-l-lem-0)

            expand'-╬╣Рѓђ,╬╣РѓЂ : Рѕђ{z : ­Юљњ­ЮљГ­ЮљЮ _} -> {k : (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v)) РЪХ z} -> k Рѕ╝ (Elim.╬Й (╬╣Рѓђ' РЌє k) (╬╣РѓЂ' РЌє k))
            expand'-╬╣Рѓђ,╬╣РѓЂ {z} {k} = pointwise lem-12
              where
                lem-11 : Рѕђ(h : РЪе (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v)) РЪЕ) -> РЪе k РЪЕ (lem-1 (lem-0 h)) Рѕ╝ РЪе (Elim.╬Й (╬╣Рѓђ' РЌє k) (╬╣РѓЂ' РЌє k)) РЪЕ h
                lem-11 h with lem-0 h
                ... | right-РѕЇ X = refl
                ... | left-РѕЇ X = refl

                lem-12 : Рѕђ(h : РЪе (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v)) РЪЕ) -> РЪе k РЪЕ h Рѕ╝ РЪе (Elim.╬Й (╬╣Рѓђ' РЌє k) (╬╣РѓЂ' РЌє k)) РЪЕ h
                lem-12 h = cong-Рѕ╝ {{of k}} (inverse-РЌє-l-lem-0) РЂ╗┬╣ РѕЎ lem-11 h

            РдЌ_Рдў' : Рѕђ{z : ­Юљњ­ЮљГ­ЮљЮ _} -> (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u РЪХ z) ├Ќ (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ v РЪХ z) -> (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v)) РЪХ z
            РдЌ_Рдў' {z} (f , g) = Elim.╬Й f g

            cong-╬Й : Рѕђ{z : ­Юљњ­ЮљГ­ЮљЮ _} -> {fРѓђ fРѓЂ : РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u РЪХ z} -> {gРѓђ gРѓЂ : РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ v РЪХ z}
                     -> fРѓђ Рѕ╝ fРѓЂ -> gРѓђ Рѕ╝ gРѓЂ -> Elim.╬Й fРѓђ gРѓђ Рѕ╝ Elim.╬Й fРѓЂ gРѓЂ
            cong-╬Й {z} {fРѓђ} {fРѓЂ} {gРѓђ} {gРѓЂ} p q = pointwise lem-12
              where
                lem-12 : Рѕђ(h) -> РЪе Elim.╬Й fРѓђ gРѓђ РЪЕ h Рѕ╝ РЪе Elim.╬Й fРѓЂ gРѓЂ РЪЕ h
                lem-12 h with lem-0 h
                ... | left-РѕЇ X   = РЪе p РЪЕ _
                ... | right-РѕЇ X  = РЪе q РЪЕ _


            Res : isCoproduct (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u) (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ v) (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v))
            isCoproduct.╬╣Рѓђ Res = ╬╣Рѓђ'
            isCoproduct.╬╣РѓЂ Res = ╬╣РѓЂ'
            isCoproduct.РдЌ Res Рдў = РдЌ_Рдў'
            isCoproduct.reduce-╬╣Рѓђ Res {z} {f} {g} = Elim.reduce-╬╣Рѓђ' f g
            isCoproduct.reduce-╬╣РѓЂ Res {z} {f} {g} = Elim.reduce-╬╣РѓЂ' f g
            isCoproduct.expand-╬╣Рѓђ,╬╣РѓЂ Res = expand'-╬╣Рѓђ,╬╣РѓЂ
            isCoproduct.isSetoidHom:РдЌРдў Res = record { cong-Рѕ╝ = ╬╗ (p , q) -> cong-╬Й p q }


        P : Рѕђ{u v x : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ I} -> isCoproduct u v x -> isCoproduct (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u) (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ v) (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ x)
        P {u} {v} {x} isCoproduct:x = lem-14
          where
            instance _ = isCoproduct:x

            lem-11 : u Ріћ v РЅЁ x
            lem-11 = РЅЁ:byIsCoproduct

            lem-12 : isCoproduct (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u) (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ v) (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v))
            lem-12 = Q

            lem-13 : (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ (u Ріћ v)) РЅЁ (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ x)
            lem-13 = congOf-РЅЁ (Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a)) lem-11

            lem-14 : isCoproduct (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ u) (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ v) (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ x)
            lem-14 = transp-РЅЁ-Coproduct lem-13 {{lem-12}}


