
{-# OPTIONS --experimental-lossy-unification #-}

-- NOTE
-- This file only typechecks with --experimental-lossy-unification,
-- because at some places unification of morphisms in ­ЮљЁ­Юљ«­ЮљЦ­ЮљЦ would
-- need annotations otherwise.
-- With --experimental-lossy-unification, we do not need those.
--

module Verification.Core.Data.FiniteIndexed.Instance.Impossible.Atomic where

open import Verification.Conventions hiding (_Ріћ_)
open import Verification.Core.Set.Setoid
open import Verification.Core.Set.Setoid.Definition
open import Verification.Core.Set.Setoid.Instance.Category
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Discrete
open import Verification.Core.Category.Std.Category.Instance.Category
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Functor.Instance.Category
open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Category.Std.Category.Structured.FiniteCoproduct.Definition

open import Verification.Core.Data.Universe.Instance.Category
open import Verification.Core.Data.List.Variant.Binary.Natural
open import Verification.Core.Data.List.Variant.Binary.Instance.Functor
open import Verification.Core.Data.List.Variant.Binary.Definition
open import Verification.Core.Data.List.Variant.Binary.Instance.Monoid
open import Verification.Core.Data.List.Variant.Binary.Element.Definition
open import Verification.Core.Data.List.Variant.Binary.ElementSum.Definition
open import Verification.Core.Data.List.Variant.Binary.ElementSum.Instance.Category
-- open import Verification.Core.Data.Indexed.Duplicate
open import Verification.Core.Data.Indexed.Definition
open import Verification.Core.Data.Indexed.Instance.Monoid
open import Verification.Core.Data.FiniteIndexed.Definition
open import Verification.Core.Category.Std.Category.Subcategory.Full
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Instance.Functor
open import Verification.Core.Category.Std.Category.Construction.Coproduct
open import Verification.Core.Category.Std.Limit.Cone.Colimit.Definition
open import Verification.Core.Category.Std.Natural.Definition
open import Verification.Core.Category.Std.Functor.Representable2
open import Verification.Core.Category.Std.Functor.Constant
open import Verification.Core.Data.List.Variant.Binary.Element.As.Indexed

open import Verification.Core.Category.Std.Category.Structured.FiniteCoproductGenerated
open import Verification.Core.Category.Std.Category.Structured.Atomic.Definition
open import Verification.Core.Category.Std.Limit.Cone.Colimit.Definition
-- open import Verification.Core.Category.Std.Limit.Representation.Colimit.Definition




--
-- Description
--
-- In this file we try to show that ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ is atomic (as defined in #12),
-- but it appears to be impossible, seemingly requiring something Axiom-of-Choice-like,
-- in the definition of `╬Й` below.
--



module _ {I : ­Юњ░ ­ЮЉќ} where
  ­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ : I -> ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ I
  ­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ i = incl (incl i)

  module _ {­ЮЉЌ : ­ЮћЈ ^ 3} {a : I} where
    isAtom:­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ : isAtom ­ЮЉЌ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a)
    isAtom:­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ {­ЮњЦ} D {x} xP = Proof
      where
        ╬▒ : Natural D (Const x)
        ╬▒ = colimitCocone xP

        ╬▓рхў : Рѕђ(j : РЪе ­ЮњЦ РЪЕ) -> (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a РЪХ РЪе D РЪЕ j) -> ­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a РЪХ x
        ╬▓рхў j f = f РЌє РЪе ╬▒ РЪЕ j
        instance
          isSetoidHom:╬▓ : Рѕђ{j} -> isSetoidHom (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a РЪХ РЪе D РЪЕ j) (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a РЪХ x) (╬▓рхў j)
          isSetoidHom:╬▓ = record { cong-Рѕ╝ = ╬╗ p Рєњ p РЌѕ refl }

        lem-1 : Рѕђ{j k : РЪе ­ЮњЦ РЪЕ} -> Рѕђ(¤Ћ : j РЪХ k) -> Рѕђ(f : (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪХ РЪе D РЪЕ j) -> ╬▓рхў j f Рѕ╝  ╬▓рхў k (РЪе mapOf (D РЌє-­Юљѓ­Юљџ­ЮљГ Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a)) ¤Ћ РЪЕ f)
        lem-1 {j} {k} ¤Ћ f = ╬▓рхў j f

                РЪе refl РЪЕ-Рѕ╝

                f РЌє РЪе ╬▒ РЪЕ j

                РЪе refl РЌѕ unit-r-РЌє РЂ╗┬╣ РЪЕ-Рѕ╝

                f РЌє (РЪе ╬▒ РЪЕ j РЌє id)

                РЪе refl РЌѕ naturality {{of ╬▒}} (¤Ћ) РЪЕ-Рѕ╝

                f РЌє (mapOf D ¤Ћ РЌє РЪе ╬▒ РЪЕ k)

                РЪе assoc-r-РЌє РЪЕ-Рѕ╝

                (f РЌє mapOf D ¤Ћ) РЌє РЪе ╬▒ РЪЕ k

                Рѕј

        isNatural:╬▓ : isNatural (D РЌє-­Юљѓ­Юљџ­ЮљГ Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a)) (Const (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ x)) (╬╗ j -> Рђ▓ ╬▓рхў j Рђ▓)
        isNatural:╬▓ = natural ╬╗ ¤Ћ Рєњ pointwise ╬╗ f -> lem-1 ¤Ћ f

        ╬▓ : Natural (D РЌє-­Юљѓ­Юљџ­ЮљГ Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a)) (Const (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ x))
        ╬▓ = (╬╗ j -> Рђ▓ ╬▓рхў j Рђ▓) since isNatural:╬▓

        module _ (╬│ : ­Юљѓ­Юље­Юљю­Юље­ЮљД­Юљъ (D РЌє-­Юљѓ­Юљџ­ЮљГ Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a))) where

          ╬Й : SetoidHom (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a РЪХ x) (pt ╬│)
          ╬Й = {!!} since {!!}

          -- (y : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ I) (╬│ : Natural (D РЌє-­Юљѓ­Юљџ­ЮљГ Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a)) (Const (РЪе Рёј­ЮЉю­ЮЉџрхњрхќ (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a) РЪЕ y))) where
          -- ╬Йрхў : SetoidHom (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a РЪХ x) (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ )
          lem-2 : cocone (­ЮЉа­ЮЉќ­ЮЉЏ­ЮЉћ­ЮЉЎ a РЪХ x) ╬▓ РЪХ ╬│
          lem-2 = record
            { pt = ╬Й
            ; РЌ║ = {!!}
            }

        Proof = record
          { colimitCocone = ╬▓
          ; colimitUniversal = record
            { elim-РіЦ = lem-2 _
            ; expand-РіЦ = {!!}
            }
          }

