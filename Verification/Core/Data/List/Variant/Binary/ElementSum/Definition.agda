
module Verification.Core.Data.List.Variant.Binary.ElementSum.Definition where

open import Verification.Core.Conventions hiding (‚Ñï)


open import Verification.Core.Set.Decidable
open import Verification.Core.Set.Setoid.Definition
open import Verification.Core.Set.Setoid.Free
open import Verification.Core.Algebra.Monoid.Definition

open import Verification.Core.Data.List.Variant.Binary.Definition
open import Verification.Core.Data.List.Variant.Binary.Instance.Setoid
open import Verification.Core.Data.List.Variant.Binary.Instance.Monoid
open import Verification.Core.Data.List.Variant.Binary.Element.Definition


-- [Hide]
module _ {A : ùí∞ ùëñ} where
  record [_]·∂†·µò (as : ‚ãÜList A) : ùí∞ ùëñ where
    constructor member
    field {getMemberSort} : A
    field getMember : as ‚àç getMemberSort

  open [_]·∂†·µò public

  module _ (as : ‚ãÜList A) where
    macro [_]·∂† = #structureOn [ as ]·∂†·µò

  left·∂†·µò : ‚àÄ{as bs} -> [ as ]·∂† -> [ as ‚ãÜ bs ]·∂†
  left·∂†·µò (member a) = member (left-‚àç a)

  right·∂†·µò : ‚àÄ{as bs} -> [ bs ]·∂† -> [ as ‚ãÜ bs ]·∂†
  right·∂†·µò (member a) = member (right-‚àç a)

  module _ {as bs : ‚ãÜList A} where
    macro left·∂†  = #structureOn (left·∂†·µò {as = as} {bs = bs})
    macro right·∂† = #structureOn (right·∂†·µò {as = as} {bs = bs})



-- //


