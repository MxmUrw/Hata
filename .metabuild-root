globalConfig:
  buildRelDir: _build/metabuild
  binRelDir: _build/bin

haskellStackProjects: []
  # - haskellStackBin_RelFile: metabuild
  #   haskellStackSource_RelDir: Buildsystem/MetaBuilder
  #   haskellStackAutobuild: false
  #   installGlobal: true

agdaProjects:
  - sourceRelDir: .
    sourceOverwrite_RelDir: UnsafeOverwrite
    mainRelFile: Verification/Application/Main.agda
    agdaBin_RelFile: hata
    haskellStackTemplateRelDir: Runtime
    agdaAutobuild: false
    libraryDefinitions_Filename: hata.agda-lib


agdaPublishProjects:
  - projectName: catalg
    autobuild: false
    fastbuild: true
    latexRepeatBuild: 1
    source_RelDir: Verification
    bibfile_RelFile: "Notes/Topic/VTC/references.bib"
    abstract_RelFile: "Notes/Topic/CatAlg/Title.tex"
    # include_RelFiles:
    #   - Experimental/Theory/Std/Generic/Theory/Definition.agda
    #   - Experimental/Theory/Std/Generic/LogicalFramework/Definition.agda
    agdaPublishDocumentDescription:
      documentTitle: "Categories and Algebra"
      documentAuthor: "Maxim Urschumzew"
      documentType: SCReport
      documentDate: ""
      notImportantFiles: []
      documentFilesAndHeadings:
      - Core/Category/Std/Category/As/Monoid2/Definition.agda
      - Core/Algebra/Monoid/Instance/Category.agda
    libraryDefinitions_Filename: hata.agda-lib



  - projectName: testvtc
    autobuild: false
    fastbuild: true
    latexRepeatBuild: 1
    source_RelDir: Verification
    bibfile_RelFile: "Notes/Topic/VTC/references.bib"
    abstract_RelFile: "Notes/Topic/VTC/Abstract.tex"
    libraryDefinitions_Filename: hata.agda-lib
    agdaPublishDocumentDescription:
      documentTitle: "Verified Type Checking (Test)"
      documentAuthor: "Maxim Urschumzew"
      documentType: SCReport
      documentDate: ""
      notImportantFiles: []
      documentFilesAndHeadings:
      - = Main
      - Core/Data/List/Dependent/Variant/Unary/Definition.agda
      - Core/Data/List/Dependent/Variant/Binary/Definition.agda
      # - = Cats
      # - Core/Category/Std/Category/Definition.agda
      # - Core/Data/List/Dependent/Variant/Binary/Definition.agda

  - projectName: vtc
    autobuild: false
    fastbuild: true
    latexRepeatBuild: 3
    source_RelDir: Verification
    bibfile_RelFile: "Notes/Topic/VTC/references.bib"
    abstract_RelFile: "Notes/Topic/VTC/Abstract.tex"
    # include_RelFiles:
    #   - Experimental/Theory/Std/Generic/Theory/Definition.agda
    #   - Experimental/Theory/Std/Generic/LogicalFramework/Definition.agda
    agdaPublishDocumentDescription:
      documentTitle: "Verified Type Checking"
      documentAuthor: "Maxim Urschumzew"
      documentType: SCReport
      documentDate: ""
      notImportantFiles:
      - Core/Data/List/Variant/Unary/DefinitionCopy.agda
      documentFilesAndHeadings:
      - Notes/HataStandardImport.agda
      - Notes/Topic/VTC/Introduction.agda
      - = About this formalization
      - Notes/Topic/VTC/AboutAgda.agda
      - Core/Data/List/Variant/Unary/DefinitionResult.agda
      - Core/Data/List/Variant/Unary/DefinitionCopy.agda
      - = Basics
      - Notes/Topic/VTC/BasicBasics.agda
      - == Lists
      - Core/Data/List/Variant/Unary/Definition.agda
      - Core/Data/List/Variant/Unary/Element.agda
      - Core/Data/List/Variant/Unary/Natural.agda
      - == Equality and Setoids
      - Conventions/Prelude/Classes/Setoid.agda
      - == Monoids
      - Core/Algebra/Monoid/Definition.agda
      - Core/Data/List/Variant/Unary/Instance/Monoid.agda
      - == Binary lists
      - Core/Data/List/Variant/Binary/Definition.agda
      - Core/Data/List/Variant/Binary/Element/Definition.agda
      - Core/Data/List/Variant/Binary/Instance/Setoid.agda
      - Core/Data/List/Variant/Binary/Instance/Monoid.agda
      - == Hindley Milner Types
      - Core/Data/Language/HindleyMilner/Type/Variant/Direct/Definition.agda
      - = Category theory
      - Core/Category/Std/Category/Introduction.agda
      - == Categories
      - Core/Category/Std/Category/Definition.agda
      - Core/Data/Universe/Instance/Category.agda
      - == Morphisms in categories
      - Core/Category/Std/Morphism/Iso/Definition.agda
      - Core/Category/Std/Morphism/Epi/Definition.agda
      - == Colimits
      - Core/Category/Std/Category/ColimitIntroduction.agda
      - Core/Category/Std/Limit/Specific/Coproduct/Variant/Binary.agda
      - Core/Category/Std/Limit/Specific/Coequalizer/Definition.agda
      - = Many sorted terms
      - Core/Theory/Std/Specific/FirstOrderTerm/Introduction.agda
      - == Signature and definition of terms
      - Core/Theory/Std/Specific/FirstOrderTerm/Signature.agda
      - Core/Theory/Std/Specific/FirstOrderTerm/Definition.agda
      - == Simple types as example
      - Core/Data/Language/HindleyMilner/Type/Variant/FirstOrderTerm/Signature.agda
      - Core/Data/Language/HindleyMilner/Type/VariantTranslation/Definition.agda
      - == Substitutions
      - Core/Theory/Std/Specific/FirstOrderTerm/Substitution/Definition.agda
      - == Category of substitutions
      - Core/Theory/Std/Specific/FirstOrderTerm/Substitution/Category.agda
      - = Unification
      - == Informal description
      - Core/Theory/Std/Specific/FirstOrderTerm/Unification/Introduction.agda
      - Core/Computation/Unification/Definition.agda
      - Core/Theory/Std/Specific/FirstOrderTerm/Unification/ProblemByExample.agda
      - Core/Theory/Std/Specific/FirstOrderTerm/Unification/SolutionSketch.agda
      - == The optimist's lemma
      - Core/Computation/Unification/Categorical2/Introduction.agda
      - Core/Category/Std/Category/As/ZeroMorphismCategory/Definition.agda
      - Core/Category/Std/Category/As/ZeroMorphismCategory/Free.agda
      - Core/Computation/Unification/Categorical2/Ideal.agda
      - Core/Computation/Unification/Categorical2/ZeroIdeal.agda
      - Core/Computation/Unification/Categorical2/SemilatticeStructure.agda
      - Core/Computation/Unification/Categorical2/ForwardAction.agda
      - Core/Computation/Unification/Categorical2/InverseAction.agda
      - Core/Computation/Unification/Categorical2/EpiPrincipal.agda
      - Core/Computation/Unification/Categorical2/Optimist.agda
      - == Further proofs for categorical unification
      - Core/Computation/Unification/Categorical2/GenericUnification.agda
      - = Hindley-Milner Type Theory
      - Core/Data/Language/HindleyMilner/Variant/Classical/Notes/Introduction.agda
      - == Untyped terms
      - Core/Data/Language/HindleyMilner/Variant/Classical/Untyped/Definition.agda
      - == Types and Contexts
      - Core/Data/Language/HindleyMilner/Variant/Classical/Typed/Type/Definition.agda
      - Core/Data/Language/HindleyMilner/Variant/Classical/Typed/Context/Definition.agda
      - === Substitutions
      - Core/Data/Language/HindleyMilner/Variant/Classical/Typed/Type/Properties.agda
      - == Typing rules
      - Core/Data/Language/HindleyMilner/Variant/Classical/Typed/Definition.agda
      - == Typechecking algorithm
      - === Statement of the Theorem
      - Core/Data/Language/HindleyMilner/Variant/Classical/Typed/Typecheck/Statement.agda
      - Notes/Topic/VTC/Declaration.agda
      # - === Case Var
      # - Core/Data/Language/HindleyMilner/Variant/Classical/Typed/Typecheck/Case/Var.agda
      # - === Case Let
      # - Core/Data/Language/HindleyMilner/Variant/Classical/Typed/Typecheck/Case/SLet.agda
      # - === Case Lam
      # - Core/Data/Language/HindleyMilner/Variant/Classical/Typed/Typecheck/Case/Lam.agda
      # - === Case App
      # - Core/Data/Language/HindleyMilner/Variant/Classical/Typed/Typecheck/Case/App.agda
      # - === Proof of the Theorem
      # - Core/Data/Language/HindleyMilner/Variant/Classical/Typed/Typecheck/Main.agda
      # # - = Appendix
      # # - == Notes
      # # - Core/Data/List/Notes/ReasonForFreeMonoidVariant.agda
      # - Notes/Topic/VTC/Discussion.agda
    libraryDefinitions_Filename: hata.agda-lib

  - projectName: hata-book
    autobuild: false
    fastbuild: false
    latexRepeatBuild: 1
    source_RelDir: Verification
    bibfile_RelFile: "Notes/Topic/Hata/references.bib"
    abstract_RelFile: "Notes/Topic/VTC/Abstract.tex"
    agdaPublishDocumentDescription:
      documentTitle: "Project æ——"
      documentSubtitle: "Theory and Implementation of Programming Languages \\\\ \\vskip 0.8em Exposition, Development notes and Manual"
      documentAuthor: "Maxim Urschumzew"
      documentType: SCReport
      documentDate: ""
      notImportantFiles: []
      documentFilesAndHeadings:
      - Overview.agda
      - ===About
      - Overview/About.agda
      - =Theoretical Foundations
      - ==Algebra
      - ==Order Theory
      - ==Category Theory
      - ==Theories
      - ===Std-Generic
      - ====Theory
      - Experimental/Theory/Std/Generic/Theory/Definition.agda
      - ====Logical Framework
      - Experimental/Theory/Std/Generic/LogicalFramework/Definition.agda
      - =Applications
      - ==Editor
      - ===Notes
      - Editor/Notes.agda
    libraryDefinitions_Filename: hata.agda-lib


      # - Experimental/Theory/Std/Generic/Theory/Definition.agda
      # - Experimental/Theory/Std/Generic/LogicalFramework/Definition.agda


      # - Writing/Introduction.agda
      # - Core/Type.agda
      # - Core/Type/Equiv.agda
      # - Core/Category.agda
      # - Core/Category/Definition.agda
      # - Core/Category/Instance.agda
      # - Core/Category/Instance/Type.agda
      # - Core/Category/Instance/Set/Definition.agda
      # - Core/Category/Instance/Opposite.agda
      # - Core/Category/Instance/Functor.agda
      # - Core/Category/Instance/Cat/Definition.agda
      # - Core/Category/Functor/Category.agda
      # - Core/Category/Functor.agda
      # - Core/Category/Functor/Adjunction.agda
      # - Core/Category/Functor/Representable.agda
      # - Core/Category/Functor/Presheaf.agda
      # - Core/Category/Quiver.agda
      # - Core/Category/FreeCategory.agda
      # - Core/Category/Limit.agda
      # - Core/Category/Limit/Specific.agda
      # - Core/Category/Limit/Specific/Coequalizer.agda
      # - Core/Category/Limit/Specific/Coproduct.agda
      # - Core/Category/Limit/Specific/Initial.agda
      # - Core/Category/Limit/Kan.agda
      # - Core/Category/Limit/Kan/Definition.agda
      # - Core/Category/Limit/Kan/Local.agda
      # - Core/Category/Instance/Type.agda
      # - Core/Category/Instance/Set/Equalizers.agda
      # - Core/Category/Instance/IdxSet/Definition.agda
      # - Core/Category/Instance/IdxSet/Coproducts.agda
      # - Core/Category/Instance/Kleisli/Definition.agda
      # - Core/Category/Monad/Definition.agda
      # - Core/Category/Monad/Instance/Coproduct.agda
      # - Core/Algebra.agda
      # - Core/Algebra/Basic.agda
      # - Core/Algebra/Basic/Monoid.agda
      # - Core/Algebra/Basic/Group.agda
      # - Core/Algebra/Basic/Abelian.agda
      # - Core/Algebra/Basic/Ring.agda
      # - Core/Algebra/Action.agda
      # - Core/Algebra/Action/MonoidModule.agda
      # - Unification/Definition.agda
      # - Unification/RecAccessible.agda
      # - Unification/Instance/Signature.agda
      # - Unification/Substitution.agda
      # - Unification/RecMonad.agda
      # - Unification/RecModule.agda
      # - Unification/TheFunctor.agda
      # - Typechecking.agda
